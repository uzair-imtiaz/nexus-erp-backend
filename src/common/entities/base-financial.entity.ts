import {
  Column,
  CreateDateColumn,
  DeleteDateColumn,
  JoinColumn,
  ManyToOne,
  OneToOne,
  UpdateDateColumn,
} from 'typeorm';
import { BaseEntity } from './base.entity';
import { Bank } from 'src/bank/entity/bank.entity';
import { Journal } from 'src/journal/entity/journal.entity';
import { PaymentTypes } from '../enums/payment-type.enum';

export class BaseFinancialEntity extends BaseEntity {
  @Column({ nullable: true })
  ref?: string;

  @Column({ type: 'timestamp with time zone' })
  date: Date;

  @Column({ nullable: true })
  notes?: string;

  @ManyToOne(() => Bank)
  @JoinColumn({ name: 'bank_id' })
  bank: Bank;

  @Column({ type: 'enum', enum: PaymentTypes, default: PaymentTypes.CASH })
  mode: PaymentTypes;

  @Column({ type: 'decimal', precision: 18, scale: 2, default: 0 })
  amount: number;

  @Column({ type: 'bool', default: false, name: 'is_auto_generated' })
  isAutoGenerated: boolean;

  @OneToOne(() => Journal)
  @JoinColumn({ name: 'journal_id' })
  journal: Journal;

  @CreateDateColumn({ name: 'created_at', type: 'timestamp with time zone' })
  createdAt: Date;

  @UpdateDateColumn({ name: 'updated_at', type: 'timestamp with time zone' })
  updatedAt: Date;

  @DeleteDateColumn({
    name: 'deleted_at',
    type: 'timestamp with time zone',
    nullable: true,
  })
  deletedAt: Date;
}
